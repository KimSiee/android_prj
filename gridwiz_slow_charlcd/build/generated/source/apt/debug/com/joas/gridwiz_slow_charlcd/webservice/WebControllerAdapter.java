package com.joas.gridwiz_slow_charlcd.webservice;

import com.yanzhenjie.andserver.framework.handler.MappingAdapter;
import com.yanzhenjie.andserver.framework.handler.RequestHandler;
import com.yanzhenjie.andserver.mapping.Addition;
import com.yanzhenjie.andserver.mapping.Mapping;
import com.yanzhenjie.andserver.mapping.Method;
import com.yanzhenjie.andserver.mapping.Mime;
import com.yanzhenjie.andserver.mapping.Path;
import java.lang.Override;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This file was generated by AndServer automatically and you should NOT edit it. */
public final class WebControllerAdapter extends MappingAdapter {
  private WebController mHost;

  private Map<Mapping, RequestHandler> mMappingMap;

  public WebControllerAdapter() {
    this.mHost = new WebController();
    this.mMappingMap = new LinkedHashMap<>();

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/login/{userId}/{password}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerLoginHandler handler = new WebControllerLoginHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/verify_token/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerVerify_tokenHandler handler = new WebControllerVerify_tokenHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getstatus/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerGet_statusHandler handler = new WebControllerGet_statusHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getnetwork/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerGet_networkHandler handler = new WebControllerGet_networkHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getsystem/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerGet_systemHandler handler = new WebControllerGet_systemHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/factoryreset/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerFactoryresetHandler handler = new WebControllerFactoryresetHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getrecentsyslog/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerGet_recentsyslogHandler handler = new WebControllerGet_recentsyslogHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getrecentcommlog/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerGet_recentcommlogHandler handler = new WebControllerGet_recentcommlogHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getcommlogfiles/{token}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Addition addition = new Addition();
      WebControllerGet_commlogfilesHandler handler = new WebControllerGet_commlogfilesHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/getcommlogfiledown/{token}/{filename}");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("text/plain");
      mapping.setProduce(produce);

      Addition addition = new Addition();
      WebControllerGet_commlogfiledownHandler handler = new WebControllerGet_commlogfiledownHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/get");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("GET");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/json;charset=UTF-8");
      mapping.setProduce(produce);

      Addition addition = new Addition();
      WebControllerGetHandler handler = new WebControllerGetHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/setnetwork");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("POST");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/json;charset=UTF-8");
      mapping.setProduce(produce);

      Addition addition = new Addition();
      WebControllerSet_networkHandler handler = new WebControllerSet_networkHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/setsystem");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("POST");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/json;charset=UTF-8");
      mapping.setProduce(produce);

      Addition addition = new Addition();
      WebControllerSet_systemHandler handler = new WebControllerSet_systemHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/swupdate");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("POST");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/json;charset=UTF-8");
      mapping.setProduce(produce);

      Addition addition = new Addition();
      WebControllerSw_updateHandler handler = new WebControllerSw_updateHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }

     {
      Mapping mapping = new Mapping();

      Path path = new Path();
      path.addRule("/api/post");
      mapping.setPath(path);

      Method method = new Method();
      method.addRule("POST");
      mapping.setMethod(method);

      Mime produce = new Mime();
      produce.addRule("application/json;charset=UTF-8");
      mapping.setProduce(produce);

      Addition addition = new Addition();
      WebControllerPostHandler handler = new WebControllerPostHandler(mHost, mapping, addition, true);
      mMappingMap.put(mapping, handler);
    }
  }

  @Override
  protected Map<Mapping, RequestHandler> getMappingMap() {
    return mMappingMap;
  }

  @Override
  protected WebController getHost() {
    return mHost;
  }
}
